/*
 * Audio_LED_Strip.c
 *
 * Created: 9/1/2021 3:04:03 PM
 * Author : Xh0kat
 RGB LED test to find the range of values for the RGB led provided.
 */ 

// System includes
#include <stdlib.h>
#include <avr/io.h>
#include <avr/interrupt.h> // header for interrupts
#include <util/delay.h>

// Prototypes
void cycle_led( void );
void PWMsetup();
void PWMsetup2();
// Variables
double dutyCycle = 0;


int main(int argc, char *argv[])
{ 
	// Hardware Setup
	PWMsetup();
	//DDRL = 0b11111111; // Sets all pins on Port L to output 
	// Step 6: Set PORTB as outputs (they are PWM ports)
	DDRB = 0xFF;
	PWMsetup();
	sei(); // enable all interrupts
	
	while(1)
	{
		_delay_ms(3000);
		dutyCycle += 10;
		if (dutyCycle > 100)
		{
			OCR0A = 0;
			OCR1B = 0;
		}
	}
	return (0); 
}

// set RGB led to red color
void led_red( void )
{
	PORTL = 0b11111111;	
}

// set RGB led to red color
void cycle_led( void )
{
	PORTL = 0x01;
}

// PWM setup taken from Mechatronics project (0 timer register)
void PWMsetup()
{
	// Step 1: Set Timer 0 to fast PWM
	// Step 3: Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	TCCR0A |= _BV(WGM01) | _BV(WGM00) | _BV(COM0A1);
	TCCR1A  = (1<<WGM11);
//	TCCR1B  = (1<<WGM12) | (1<<WGM13);
	//TCCR1B |= (1<<CS11);  //prescale 8, step = 1 us
	//TCCR1B  = (1<<WGM12) | (1<<WGM13);
	TCCR1B |= (1<<CS11); 
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1); 
	// Step 2: Enable the output compare match A interrupt 
	TIMSK0 |= _BV(OCIE0A);
	
	// Step 5: Value that the output compare resets PWM signal at

	// Step 4: Set clock pre-scaler to 1/64 to ensure PWM will run at ~488 Hz
	TCCR0B |= _BV(CS01) | _BV(CS00);
		OCR0A = (dutyCycle/100)*255;
	OCR1B = (dutyCycle/100)*255;
}

// Resets the timer 0 interrupt that runs PWM. Keeps timer 1 and timer 0 running properly
ISR(TIMER0_COMPA_vect)
{
OCR0A = (dutyCycle/100)*255;
OCR1B = (dutyCycle/100)*255;
}

